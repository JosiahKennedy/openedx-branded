{"version":3,"sources":["webpack:///enrollment-geography-main-23e7c8954482d00786db.js","webpack:///./analytics_dashboard/static/js/enrollment-geography-main.js"],"names":["webpackJsonp","771","module","exports","__webpack_require__","e","then","__WEBPACK_AMD_REQUIRE_ARRAY__","page","DataTableView","WorldMapView","enrollmentGeographyMap","el","model","models","courseModel","modelAttribute","tooltip","gettext","columns","key","title","className","type","sorting","renderIfDataAvailable","apply","catch","oe"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YCAAA,GAAAC,EAAA,GAAAC,KAAA,WAAQ,GAAAC,IAACH,EAAA,MAAT,SAAqCI,GAIjCJ,EAAAC,EAAA,GAAAC,KAAA,WAAQ,GAAAC,IAACH,EAAA,IAAyBA,EAAA,OAAlC,SACaK,EAAeC,GAEpB,GAAIC,GAAyB,GAAID,IACzBE,GAAI,wBACJC,MAAOL,EAAKM,OAAOC,YACnBC,eAAgB,sBAEhBC,QAASC,QAAQ,2GAGM,IAAIT,IAC3BG,GAAI,wCACJC,MAAOL,EAAKM,OAAOC,YACnBC,eAAgB,sBAChBG,UACKC,IAAK,cAAeC,MAAOH,QAAQ,uBACnCE,IAAK,UAAWC,MAAOH,QAAQ,WAAYI,UAAW,aAAcC,KAAM,YAE1EH,IAAK,QAASC,MAAOH,QAAQ,sBAAuBI,UAAW,aAAcC,KAAM,WAExFC,SAAU,YAEOC,wBACzBd,EAAuBc,0BDO5BC,MAAM,KAAMnB,KC/BfoB,MAAAvB,EAAAwB,MDgCDF,MAAM,KAAMnB,KCpCfoB,MAAAvB,EAAAwB,ODwCG","file":"enrollment-geography-main-23e7c8954482d00786db.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ 771:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * This is the first script called by the enrollment geography page.  It loads\n * the libraries and kicks off the application.\n */\n\n__webpack_require__.e/* require */(0/* aggressive-merge */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(10)]; ((function (page) {\n    'use strict';\n\n    // this is your page specific code\n\n    __webpack_require__.e/* require */(0/* aggressive-merge */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(12), __webpack_require__(819)]; ((function (DataTableView, WorldMapView) {\n        // Enrollment by country map\n        var enrollmentGeographyMap = new WorldMapView({\n            el: '[data-view=world-map]',\n            model: page.models.courseModel,\n            modelAttribute: 'enrollmentByCountry',\n            // eslint-disable-next-line max-len\n            tooltip: gettext('Learner location is determined from IP address. This map shows where learners most recently connected.')\n        }),\n\n        // Enrollment by country table\n        enrollmentGeographyTable = new DataTableView({\n            el: '[data-role=enrollment-location-table]',\n            model: page.models.courseModel,\n            modelAttribute: 'enrollmentByCountry',\n            columns: [{ key: 'countryName', title: gettext('Country or Region') }, { key: 'percent', title: gettext('Percent'), className: 'text-right', type: 'percent' },\n            // Translators: The noun count (e.g. number of learners)\n            { key: 'count', title: gettext('Current Enrollment'), className: 'text-right', type: 'number' }],\n            sorting: ['-count']\n        });\n        enrollmentGeographyTable.renderIfDataAvailable();\n        enrollmentGeographyMap.renderIfDataAvailable();\n    }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);\n}).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));}).catch(__webpack_require__.oe);\n\n/***/ })\n\n},[771]);\n\n\n// WEBPACK FOOTER //\n// enrollment-geography-main-23e7c8954482d00786db.js","/**\n * This is the first script called by the enrollment geography page.  It loads\n * the libraries and kicks off the application.\n */\n\nrequire(['load/init-page'], function(page) {\n    'use strict';\n\n    // this is your page specific code\n    require(['views/data-table-view', 'views/world-map-view'],\n        function(DataTableView, WorldMapView) {\n            // Enrollment by country map\n            var enrollmentGeographyMap = new WorldMapView({\n                    el: '[data-view=world-map]',\n                    model: page.models.courseModel,\n                    modelAttribute: 'enrollmentByCountry',\n                    // eslint-disable-next-line max-len\n                    tooltip: gettext('Learner location is determined from IP address. This map shows where learners most recently connected.')\n                }),\n                // Enrollment by country table\n                enrollmentGeographyTable = new DataTableView({\n                    el: '[data-role=enrollment-location-table]',\n                    model: page.models.courseModel,\n                    modelAttribute: 'enrollmentByCountry',\n                    columns: [\n                        {key: 'countryName', title: gettext('Country or Region')},\n                        {key: 'percent', title: gettext('Percent'), className: 'text-right', type: 'percent'},\n                        // Translators: The noun count (e.g. number of learners)\n                        {key: 'count', title: gettext('Current Enrollment'), className: 'text-right', type: 'number'}\n                    ],\n                    sorting: ['-count']\n                });\n            enrollmentGeographyTable.renderIfDataAvailable();\n            enrollmentGeographyMap.renderIfDataAvailable();\n        }\n    );\n});\n\n\n\n// WEBPACK FOOTER //\n// ./analytics_dashboard/static/js/enrollment-geography-main.js"],"sourceRoot":""}