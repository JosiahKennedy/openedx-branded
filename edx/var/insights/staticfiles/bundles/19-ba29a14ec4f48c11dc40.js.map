{"version":3,"sources":["webpack:///19-ba29a14ec4f48c11dc40.js","webpack:///./analytics_dashboard/static/js/load/init-tracking.js","webpack:///./analytics_dashboard/static/js/views/clickable-view.js","webpack:///./analytics_dashboard/static/js/views/hoverable-view.js","webpack:///./analytics_dashboard/static/js/views/tracking-view.js"],"names":["webpackJsonp","963","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","$","_","ClickableView","HoverableView","TrackingView","Utils","instrumentEvents","eventType","trackingViewClass","models","each","track","trackingView","properties","getNodeProperties","attributes","model","trackingModel","trackEventType","attr","trackProperties","el","renderIfHasEventType","isTracking","document","userModel","courseModel","applicationIdSet","apply","964","Backbone","View","extend","initialize","options","this","render","self","$el","click","trigger","has","965","one","966","segment","events","shown.bs.tooltip","clicked.tracking","listenToOnce","trackId","get","initSegment","logUser","page","buildCourseProperties","listenTo","trackElementEvent","ev","trackedElement","target","trackType","triggered","isEmpty","isString","applicationKey","isUndefined","window","analytics","methods","factory","t","a","Array","prototype","slice","call","arguments","unshift","push","i","length","key","load","getElementById","createElement","type","id","async","src","location","protocol","n","getElementsByTagName","parentNode","insertBefore","SNIPPET_VERSION","identify","name","username","email","ignoreInReporting","course","courseId","org","current_page","label","transformPropertiesFromHTMLAttributes","props","partVal","targetNameParts","parts","target_page","forEach","part","join","menu_depth","link_name","category","transformedProps","pageName","metadata"],"mappings":"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","file":"19-ba29a14ec4f48c11dc40.js","sourcesContent":["webpackJsonp([19],{\n\n/***/ 963:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n * Initialize tracking for page load and clicking.\n *\n * Elements with data-track-type=\"click\" will be instrumented.  The event will\n * be defined by the element's data-track-event and all other data-track-*\n * attribute values will be returns as properties to be tracked.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(176), __webpack_require__(16), __webpack_require__(964), __webpack_require__(965), __webpack_require__(966), __webpack_require__(826)], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($, _, ClickableView, HoverableView, TrackingView, Utils) {\n    'use strict';\n\n    var instrumentEvents = function instrumentEvents(eventType, trackingViewClass, models) {\n        _($('[data-track-type=\"' + eventType + '\"]')).each(function (track) {\n            // get the properties that we want to send back for with\n            // the tracking events\n            var trackingView,\n                properties = Utils.getNodeProperties(track.attributes, 'data-track-', ['data-track-event', 'data-track-triggered']);\n            trackingView = new trackingViewClass({\n                model: models.trackingModel,\n                trackEventType: $(track).attr('data-track-event'),\n                trackProperties: properties,\n                el: track\n            });\n            trackingView.renderIfHasEventType();\n        });\n    };\n\n    return function (models) {\n        var trackingView;\n\n        if (models.trackingModel.isTracking()) {\n            // this is only activated when tracking ID is set\n            trackingView = new TrackingView({\n                el: document,\n                model: models.trackingModel,\n                userModel: models.userModel,\n                courseModel: models.courseModel\n            });\n            trackingView.applicationIdSet();\n\n            // instrument the click events\n            instrumentEvents('click', ClickableView, models);\n\n            // instrument the hover events\n            instrumentEvents('hover', HoverableView, models);\n        }\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 964:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16), __webpack_require__(824)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone) {\n    'use strict';\n\n    /**\n     * Use this for triggering track events when an element is clicked.\n     * 'segment:track' and an event are fired when the element is clicked.\n     */\n\n    var ClickableView = Backbone.View.extend({\n\n        initialize: function initialize(options) {\n            var self = this;\n            self.options = options;\n        },\n\n        render: function render() {\n            var self = this;\n\n            // track the click\n            self.$el.click(function () {\n                // track this event type along with properties\n                self.model.trigger('segment:track', self.options.trackEventType, self.options.trackProperties);\n            });\n\n            return this;\n        },\n\n        renderIfHasEventType: function renderIfHasEventType() {\n            var self = this;\n\n            if (_(self.options).has('trackEventType')) {\n                self.render();\n            }\n        }\n\n    });\n\n    return ClickableView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 965:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(16), __webpack_require__(824)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (_, Backbone) {\n    'use strict';\n\n    /**\n     * Use this for triggering track events when an element is hovered over.\n     * 'segment:track' and an event are fired when the element is hovered over.\n     */\n\n    var HoverableView = Backbone.View.extend({\n\n        initialize: function initialize(options) {\n            var self = this;\n            self.options = options;\n        },\n\n        render: function render() {\n            var self = this;\n\n            // track the hover\n            self.$el.one('mouseenter', function () {\n                // track this event type along with properties\n                self.model.trigger('segment:track', self.options.trackEventType, self.options.trackProperties);\n            });\n\n            return this;\n        },\n\n        renderIfHasEventType: function renderIfHasEventType() {\n            var self = this;\n\n            if (_(self.options).has('trackEventType')) {\n                self.render();\n            }\n        }\n\n    });\n\n    return HoverableView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 966:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(824), __webpack_require__(176), __webpack_require__(16), __webpack_require__(826)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Backbone, $, _, Utils) {\n    'use strict';\n\n    /**\n     * This 'view' doesn't display anything, but rather sends tracking\n     * information in response to 'segment:track' events triggered by the\n     * model.\n     *\n     * Actions will only be tracked if segmentApplicationId is set in the\n     * model.\n     */\n\n    var TrackingView = Backbone.View.extend({\n\n        /**\n         * Reference to segment.io analytics library.  This is set after\n         * loading.\n         */\n        segment: undefined,\n\n        events: {\n            'shown.bs.tooltip': 'trackElementEvent',\n            'clicked.tracking': 'trackElementEvent'\n        },\n\n        initialize: function initialize(options) {\n            var self = this;\n\n            self.options = options;\n\n            // wait until you have a segment application ID before kicking\n            // up the script\n            self.listenToOnce(self.model, 'change:segmentApplicationId', self.applicationIdSet);\n        },\n\n        applicationIdSet: function applicationIdSet() {\n            var self = this,\n                trackId = self.model.get('segmentApplicationId');\n\n            // if no ID is supplied, then don't track\n            if (self.model.isTracking()) {\n                // kick off segment\n                self.initSegment(trackId);\n                self.logUser();\n\n                // this should be called after the user is logged\n                self.segment.page(self.buildCourseProperties());\n\n                // now segment has been loaded, we can track events\n                self.listenTo(self.model, 'segment:track', self.track);\n                self.listenTo(self.model, 'segment:page', self.page);\n            }\n        },\n\n        /**\n         * This emits an event to our external tracking systems when an\n         * event bubbles up from a DOM element.\n         */\n        trackElementEvent: function trackElementEvent(ev) {\n            var self = this,\n                trackedElement = ev.target,\n                properties = Utils.getNodeProperties(trackedElement.attributes, 'data-track-', ['data-track-event', 'data-track-triggered']),\n                eventType = $(trackedElement).attr('data-track-event'),\n                trackType = $(trackedElement).attr('data-track-type'),\n                triggered = $(trackedElement).attr('data-track-triggered');\n\n            if (!self.model.isTracking() || _.isEmpty(eventType) || !_.isString(eventType) || trackType === 'tooltip' && triggered) {\n                return;\n            }\n\n            self.track(eventType, properties);\n            $(trackedElement).attr('data-track-triggered', 'true');\n        },\n\n        /**\n         * This sets up segment.io for our application and loads the initial\n         * page load.\n         *\n         * this.segment is set for convenience.\n         */\n        initSegment: function initSegment(applicationKey) {\n            var self = this;\n\n            if (_.isUndefined(self.segment)) {\n                // This is taken directly from https://segment.io/docs/tutorials/quickstart-analytics.js/.\n\n                // eslint-disable-next-line\n                window.analytics = window.analytics || [], window.analytics.methods = ['identify', 'group', 'track', 'page', 'pageview', 'alias', 'ready', 'on', 'once', 'off', 'trackLink', 'trackForm', 'trackClick', 'trackSubmit'], window.analytics.factory = function (t) {\n                    return function () {\n                        var a = Array.prototype.slice.call(arguments);return a.unshift(t), window.analytics.push(a), window.analytics;\n                    };\n                };for (var i = 0; i < window.analytics.methods.length; i++) {\n                    var key = window.analytics.methods[i];window.analytics[key] = window.analytics.factory(key);\n                }window.analytics.load = function (t) {\n                    if (!document.getElementById('analytics-js')) {\n                        var a = document.createElement('script');a.type = 'text/javascript', a.id = 'analytics-js', a.async = !0, a.src = ('https:' === document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.io/analytics.js/v1/' + t + '/analytics.min.js';var n = document.getElementsByTagName('script')[0];n.parentNode.insertBefore(a, n);\n                    }\n                }, window.analytics.SNIPPET_VERSION = '2.0.9';\n\n                // shortcut to segment.io\n                self.segment = window.analytics;\n            }\n\n            // provide our application key for logging\n            self.segment.load(applicationKey);\n        },\n\n        /**\n         * Log the user.\n         */\n        logUser: function logUser() {\n            var self = this,\n                userModel = self.options.userModel;\n            self.segment.identify(userModel.get('userTrackingID'), {\n                name: userModel.get('name'),\n                username: userModel.get('username'),\n                email: userModel.get('email'),\n                ignoreInReporting: userModel.get('ignoreInReporting')\n            });\n        },\n\n        buildCourseProperties: function buildCourseProperties() {\n            var self = this,\n                course = {};\n\n            if (self.options.courseModel) {\n                course.courseId = self.options.courseModel.get('courseId');\n                course.org = self.options.courseModel.get('org');\n            }\n\n            if (self.model.has('page')) {\n                course.current_page = self.model.get('page');\n                course.label = self.model.get('page').name;\n            }\n\n            return course;\n        },\n\n        /**\n         * Because of limitations on HTML element data attributes, we encode objects flately with hyphen separated\n         * keys and need to transform those keys/values back into objects.\n         */\n        transformPropertiesFromHTMLAttributes: function transformPropertiesFromHTMLAttributes(props) {\n            var properties = props,\n                targetNameParts = [],\n                parts = ['scope', 'lens', 'report', 'depth'],\n                partVal;\n            // collapse target scope, lens, report, and depth to a target_page dict\n            if ('target-scope' in properties) {\n                properties.target_page = {};\n                parts.forEach(function (part) {\n                    partVal = properties['target-' + part] || '';\n                    properties.target_page[part] = partVal;\n                    if (partVal !== '' && partVal !== undefined) {\n                        targetNameParts.push(partVal);\n                    }\n                    delete properties['target-' + part];\n                });\n                properties.target_page.name = targetNameParts.join('_');\n            }\n\n            // convert hyphens to underscores for menu_depth and link_name\n            if ('menu-depth' in properties) {\n                properties.menu_depth = properties['menu-depth'] || '';\n                delete properties['menu-depth'];\n            }\n            if ('link-name' in properties) {\n                properties.link_name = properties['link-name'] || '';\n                delete properties['link-name'];\n            }\n\n            // create category from menu_depth and link_name if it is not defined\n            if ('menu_depth' in properties && 'link_name' in properties && !('category' in properties)) {\n                properties.category = properties.menu_depth + '+' + properties.link_name;\n            }\n\n            return properties;\n        },\n\n        /**\n         * Catch 'segment:track' events and create events and send\n         * to segment.io.\n         *\n         * @param eventType String event type.\n         */\n        track: function track(eventType, properties) {\n            var self = this,\n                course = self.buildCourseProperties(),\n                transformedProps;\n            transformedProps = self.transformPropertiesFromHTMLAttributes(properties);\n            // send event to segment including the course ID\n            self.segment.track(eventType, _.extend(course, transformedProps));\n        },\n\n        /**\n         * Catch 'segment:page' events in order to send a page view event to\n         * segment.io.\n         */\n        page: function page(pageName, metadata) {\n            this.segment.page(pageName, _.extend({}, this.buildCourseProperties(), metadata));\n        }\n    });\n\n    return TrackingView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 19-ba29a14ec4f48c11dc40.js","/**\n * Initialize tracking for page load and clicking.\n *\n * Elements with data-track-type=\"click\" will be instrumented.  The event will\n * be defined by the element's data-track-event and all other data-track-*\n * attribute values will be returns as properties to be tracked.\n */\ndefine(['jquery', 'underscore', 'views/clickable-view', 'views/hoverable-view', 'views/tracking-view', 'utils/utils'],\n    function($, _, ClickableView, HoverableView, TrackingView, Utils) {\n        'use strict';\n\n        var instrumentEvents = function(eventType, trackingViewClass, models) {\n            _($('[data-track-type=\"' + eventType + '\"]')).each(function(track) {\n                // get the properties that we want to send back for with\n                // the tracking events\n                var trackingView,\n                    properties = Utils.getNodeProperties(track.attributes,\n                    'data-track-', ['data-track-event', 'data-track-triggered']);\n                trackingView = new trackingViewClass({\n                    model: models.trackingModel,\n                    trackEventType: $(track).attr('data-track-event'),\n                    trackProperties: properties,\n                    el: track\n                });\n                trackingView.renderIfHasEventType();\n            });\n        };\n\n        return function(models) {\n            var trackingView;\n\n            if (models.trackingModel.isTracking()) {\n                // this is only activated when tracking ID is set\n                trackingView = new TrackingView({\n                    el: document,\n                    model: models.trackingModel,\n                    userModel: models.userModel,\n                    courseModel: models.courseModel\n                });\n                trackingView.applicationIdSet();\n\n                // instrument the click events\n                instrumentEvents('click', ClickableView, models);\n\n                // instrument the hover events\n                instrumentEvents('hover', HoverableView, models);\n            }\n        };\n    });\n\n\n\n// WEBPACK FOOTER //\n// ./analytics_dashboard/static/js/load/init-tracking.js","define(['underscore', 'backbone'],\n    function(_, Backbone) {\n        'use strict';\n\n        /**\n         * Use this for triggering track events when an element is clicked.\n         * 'segment:track' and an event are fired when the element is clicked.\n         */\n        var ClickableView = Backbone.View.extend({\n\n            initialize: function(options) {\n                var self = this;\n                self.options = options;\n            },\n\n            render: function() {\n                var self = this;\n\n                // track the click\n                self.$el.click(function() {\n                    // track this event type along with properties\n                    self.model.trigger('segment:track',\n                        self.options.trackEventType,\n                        self.options.trackProperties);\n                });\n\n                return this;\n            },\n\n            renderIfHasEventType: function() {\n                var self = this;\n\n                if (_(self.options).has('trackEventType')) {\n                    self.render();\n                }\n            }\n\n        });\n\n        return ClickableView;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./analytics_dashboard/static/js/views/clickable-view.js","define(['underscore', 'backbone'],\n    function(_, Backbone) {\n        'use strict';\n\n        /**\n         * Use this for triggering track events when an element is hovered over.\n         * 'segment:track' and an event are fired when the element is hovered over.\n         */\n        var HoverableView = Backbone.View.extend({\n\n            initialize: function(options) {\n                var self = this;\n                self.options = options;\n            },\n\n            render: function() {\n                var self = this;\n\n                // track the hover\n                self.$el.one('mouseenter', function() {\n                    // track this event type along with properties\n                    self.model.trigger('segment:track',\n                        self.options.trackEventType,\n                        self.options.trackProperties);\n                });\n\n                return this;\n            },\n\n            renderIfHasEventType: function() {\n                var self = this;\n\n                if (_(self.options).has('trackEventType')) {\n                    self.render();\n                }\n            }\n\n        });\n\n        return HoverableView;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./analytics_dashboard/static/js/views/hoverable-view.js","define(['backbone', 'jquery', 'underscore', 'utils/utils'],\n    function(Backbone, $, _, Utils) {\n        'use strict';\n\n        /**\n         * This 'view' doesn't display anything, but rather sends tracking\n         * information in response to 'segment:track' events triggered by the\n         * model.\n         *\n         * Actions will only be tracked if segmentApplicationId is set in the\n         * model.\n         */\n        var TrackingView = Backbone.View.extend({\n\n            /**\n             * Reference to segment.io analytics library.  This is set after\n             * loading.\n             */\n            segment: undefined,\n\n            events: {\n                'shown.bs.tooltip': 'trackElementEvent',\n                'clicked.tracking': 'trackElementEvent'\n            },\n\n            initialize: function(options) {\n                var self = this;\n\n                self.options = options;\n\n                // wait until you have a segment application ID before kicking\n                // up the script\n                self.listenToOnce(self.model, 'change:segmentApplicationId', self.applicationIdSet);\n            },\n\n            applicationIdSet: function() {\n                var self = this,\n                    trackId = self.model.get('segmentApplicationId');\n\n                // if no ID is supplied, then don't track\n                if (self.model.isTracking()) {\n                    // kick off segment\n                    self.initSegment(trackId);\n                    self.logUser();\n\n                    // this should be called after the user is logged\n                    self.segment.page(self.buildCourseProperties());\n\n                    // now segment has been loaded, we can track events\n                    self.listenTo(self.model, 'segment:track', self.track);\n                    self.listenTo(self.model, 'segment:page', self.page);\n                }\n            },\n\n            /**\n             * This emits an event to our external tracking systems when an\n             * event bubbles up from a DOM element.\n             */\n            trackElementEvent: function(ev) {\n                var self = this,\n                    trackedElement = ev.target,\n                    properties = Utils.getNodeProperties(\n                        trackedElement.attributes, 'data-track-', ['data-track-event', 'data-track-triggered']),\n                    eventType = $(trackedElement).attr('data-track-event'),\n                    trackType = $(trackedElement).attr('data-track-type'),\n                    triggered = $(trackedElement).attr('data-track-triggered');\n\n                if ((!self.model.isTracking() || _.isEmpty(eventType) || !_.isString(eventType)) ||\n                        (trackType === 'tooltip' && triggered)) {\n                    return;\n                }\n\n                self.track(eventType, properties);\n                $(trackedElement).attr('data-track-triggered', 'true');\n            },\n\n            /**\n             * This sets up segment.io for our application and loads the initial\n             * page load.\n             *\n             * this.segment is set for convenience.\n             */\n            initSegment: function(applicationKey) {\n                var self = this;\n\n                if (_.isUndefined(self.segment)) {\n                    // This is taken directly from https://segment.io/docs/tutorials/quickstart-analytics.js/.\n\n                    // eslint-disable-next-line\n                    window.analytics = window.analytics || [], window.analytics.methods = ['identify', 'group', 'track', 'page', 'pageview', 'alias', 'ready', 'on', 'once', 'off', 'trackLink', 'trackForm', 'trackClick', 'trackSubmit'], window.analytics.factory = function(t) { return function() { var a = Array.prototype.slice.call(arguments); return a.unshift(t), window.analytics.push(a), window.analytics; }; }; for (var i = 0; i < window.analytics.methods.length; i++) { var key = window.analytics.methods[i]; window.analytics[key] = window.analytics.factory(key); }window.analytics.load = function(t) { if (!document.getElementById('analytics-js')) { var a = document.createElement('script'); a.type = 'text/javascript', a.id = 'analytics-js', a.async = !0, a.src = ('https:' === document.location.protocol ? 'https://' : 'http://') + 'cdn.segment.io/analytics.js/v1/' + t + '/analytics.min.js'; var n = document.getElementsByTagName('script')[0]; n.parentNode.insertBefore(a, n); } }, window.analytics.SNIPPET_VERSION = '2.0.9';\n\n\n                    // shortcut to segment.io\n                    self.segment = window.analytics;\n                }\n\n                // provide our application key for logging\n                self.segment.load(applicationKey);\n            },\n\n            /**\n             * Log the user.\n             */\n            logUser: function() {\n                var self = this,\n                    userModel = self.options.userModel;\n                self.segment.identify(userModel.get('userTrackingID'), {\n                    name: userModel.get('name'),\n                    username: userModel.get('username'),\n                    email: userModel.get('email'),\n                    ignoreInReporting: userModel.get('ignoreInReporting')\n                });\n            },\n\n            buildCourseProperties: function() {\n                var self = this,\n                    course = {};\n\n                if (self.options.courseModel) {\n                    course.courseId = self.options.courseModel.get('courseId');\n                    course.org = self.options.courseModel.get('org');\n                }\n\n                if (self.model.has('page')) {\n                    course.current_page = self.model.get('page');\n                    course.label = self.model.get('page').name;\n                }\n\n                return course;\n            },\n\n            /**\n             * Because of limitations on HTML element data attributes, we encode objects flately with hyphen separated\n             * keys and need to transform those keys/values back into objects.\n             */\n            transformPropertiesFromHTMLAttributes: function(props) {\n                var properties = props,\n                    targetNameParts = [],\n                    parts = ['scope', 'lens', 'report', 'depth'],\n                    partVal;\n                // collapse target scope, lens, report, and depth to a target_page dict\n                if ('target-scope' in properties) {\n                    properties.target_page = {};\n                    parts.forEach(function(part) {\n                        partVal = properties['target-' + part] || '';\n                        properties.target_page[part] = partVal;\n                        if (partVal !== '' && partVal !== undefined) {\n                            targetNameParts.push(partVal);\n                        }\n                        delete properties['target-' + part];\n                    });\n                    properties.target_page.name = targetNameParts.join('_');\n                }\n\n                // convert hyphens to underscores for menu_depth and link_name\n                if ('menu-depth' in properties) {\n                    properties.menu_depth = properties['menu-depth'] || '';\n                    delete properties['menu-depth'];\n                }\n                if ('link-name' in properties) {\n                    properties.link_name = properties['link-name'] || '';\n                    delete properties['link-name'];\n                }\n\n                // create category from menu_depth and link_name if it is not defined\n                if ('menu_depth' in properties && 'link_name' in properties && !('category' in properties)) {\n                    properties.category = properties.menu_depth + '+' + properties.link_name;\n                }\n\n                return properties;\n            },\n\n            /**\n             * Catch 'segment:track' events and create events and send\n             * to segment.io.\n             *\n             * @param eventType String event type.\n             */\n            track: function(eventType, properties) {\n                var self = this,\n                    course = self.buildCourseProperties(),\n                    transformedProps;\n                transformedProps = self.transformPropertiesFromHTMLAttributes(properties);\n                // send event to segment including the course ID\n                self.segment.track(eventType, _.extend(course, transformedProps));\n            },\n\n            /**\n             * Catch 'segment:page' events in order to send a page view event to\n             * segment.io.\n             */\n            page: function(pageName, metadata) {\n                this.segment.page(pageName, _.extend({}, this.buildCourseProperties(), metadata));\n            }\n        });\n\n        return TrackingView;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./analytics_dashboard/static/js/views/tracking-view.js"],"sourceRoot":""}